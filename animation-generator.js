
/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä—É–∂–∏–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π.
 * –†–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
 * 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
 * 2. –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
 * 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è keyframes
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 */

function getAnimationParameters() {
  return {
    duration: parseInt(document.getElementById("duration").value), // ms
    amplitudeThresholdPercent: parseFloat(document.getElementById("amplitudeThreshold").value), // %
    damping: parseFloat(document.getElementById("damping").value),
    frequency: parseFloat(document.getElementById("frequency").value),
    rotationMultiplier: parseInt(document.getElementById("rotation").value),
    translationMultiplier: parseInt(document.getElementById("translation").value),
    scaleMultiplier: parseFloat(document.getElementById("scale").value),
    opacityMultiplier: parseFloat(document.getElementById("opacity").value),
    transformOriginX: parseInt(document.getElementById("transformOriginX").value), // %
    transformOriginY: parseInt(document.getElementById("transformOriginY").value), // %
    // Checkbox states for enabled properties
    enabledProperties: {
      rotateX: document.getElementById("enable-rotateX").checked,
      rotateY: document.getElementById("enable-rotateY").checked,
      translateX: document.getElementById("enable-translateX").checked,
      translateY: document.getElementById("enable-translateY").checked,
      scaleX: document.getElementById("enable-scaleX").checked,
      scaleY: document.getElementById("enable-scaleY").checked,
      skewX: document.getElementById("enable-skewX").checked,
      skewY: document.getElementById("enable-skewY").checked,
      opacity: document.getElementById("enable-opacity").checked
    }
  };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 * @param {Object} params - –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
function calculateAnimationData(params) {
  const fps = 60; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 60 FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
  // duration —Ç–µ–ø–µ—Ä—å –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é keyframes - —Ç–æ–ª—å–∫–æ –Ω–∞ CSS animation duration
  const maxTime = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥) - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ª—é–±–æ–π –ø—Ä—É–∂–∏–Ω—ã
  const timeStep = 1 / fps; // –®–∞–≥ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
  const amplitudeThresholdPercent = params.amplitudeThresholdPercent; // –ü–æ—Ä–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const significantFigures = 5; // –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
  const zDepth = 20; // –ì–ª—É–±–∏–Ω–∞ Z-–æ—Å–∏ –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–∞

  return {
    fps,
    maxTime, // –ò—Å–ø–æ–ª—å–∑—É–µ–º maxTime –≤–º–µ—Å—Ç–æ totalTime
    timeStep,
    amplitudeThresholdPercent,
    significantFigures,
    zDepth,
    cssAnimationDuration: params.duration, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è CSS
    ...params // –í–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  };
}

/**
 * –û–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
 * @param {number} value - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
 * @param {string} type - —Ç–∏–ø —Å–≤–æ–π—Å—Ç–≤–∞ ('px', 'deg', 'scale', 'opacity')
 * @returns {number} –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
function roundByType(value, type) {
  switch (type) {
    case 'px': // –ü–∏–∫—Å–µ–ª–∏ –¥–æ –æ–¥–Ω–æ–π –¥–µ—Å—è—Ç–æ–π
      return Math.round(value * 10) / 10;
    case 'deg': // –ì—Ä–∞–¥—É—Å—ã –¥–æ –æ–¥–Ω–æ–π –¥–µ—Å—è—Ç–æ–π  
      return Math.round(value * 10) / 10;
    case 'scale': // –ú–∞—Å—à—Ç–∞–± –¥–æ —Å–æ—Ç—ã—Ö
      return Math.round(value * 100) / 100;
    case 'opacity': // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ —Å–æ—Ç—ã—Ö
      return Math.round(value * 100) / 100;
    default:
      return Math.round(value * 100) / 100;
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
 * @param {number} time - –í—Ä–µ–º—è –∫–∞–¥—Ä–∞
 * @param {Spring} spring - –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—É–∂–∏–Ω—ã
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
function calculateFrameTransform(time, spring, data) {
  const baseAmplitude = spring.getAmplitude(time);
  const tilt = baseAmplitude; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∞–º–ø–ª–∏—Ç—É–¥—É –±–µ–∑ –º–Ω–æ–∂–∏—Ç–µ–ª—è

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è - –ø–µ—Ä–µ–≤–æ–¥—ã (–¥–æ 0.1px)
  const translateX = roundByType(
    tilt * data.translationMultiplier / 2,
    'px'
  );
  const translateY = roundByType(
    tilt * data.translationMultiplier * -1,
    'px'
  );

  // –£–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è (–¥–æ 0.1¬∞)
  const rotateX = roundByType(
    tilt * data.rotationMultiplier * 1.5,
    'deg'
  );
  const rotateY = roundByType(
    tilt * data.rotationMultiplier,
    'deg'
  );

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - –ª–µ–≥–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–¥–æ 0.01)
  const scaleX = roundByType(
    1 + (tilt * data.scaleMultiplier), // –ò—Å–ø–æ–ª—å–∑—É–µ–º scaleMultiplier
    'scale'
  );
  const scaleY = roundByType(
    1 + (tilt * data.scaleMultiplier * 0.8), // –ß—É—Ç—å –º–µ–Ω—å—à–µ –ø–æ Y –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    'scale'
  );

  // –ù–∞–∫–ª–æ–Ω - —Å–∫–æ—Å —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–æ 0.1¬∞)
  const skewX = roundByType(
    tilt * data.rotationMultiplier * 0.3,
    'deg'
  );
  const skewY = roundByType(
    tilt * data.rotationMultiplier * 0.2,
    'deg'
  );

  // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å - –ª–µ–≥–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ opacity (–¥–æ 0.01)
  const opacity = roundByType(
    Math.max(0.1, Math.min(1, 1 - Math.abs(tilt * data.opacityMultiplier))), // –ò—Å–ø–æ–ª—å–∑—É–µ–º opacityMultiplier
    'opacity'
  );

  return {
    baseAmplitude, // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∞–º–ø–ª–∏—Ç—É–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä–æ–≥–∞
    // Backwards compatibility - —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    horizontalOffset: translateX,
    verticalOffset: translateY,
    rotationX: rotateX,
    rotationY: rotateY,
    // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    translateX,
    translateY,
    rotateX,
    rotateY,
    scaleX,
    scaleY,
    skewX,
    skewY,
    opacity
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
 * @param {Object} transform - –û–±—ä–µ–∫—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å enabledProperties
 * @returns {string} CSS transform —Å—Ç—Ä–æ–∫–∞
 */
function createTransformString(transform, data) {
  const transformParts = [];
  const enabled = data.enabledProperties;

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  // –ü–æ—Ä—è–¥–æ–∫: translate -> rotate -> scale -> skew

  // Translate —Ñ—É–Ω–∫—Ü–∏–∏
  if (enabled.translateX || enabled.translateY) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º translate() –¥–ª—è 2D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    const x = enabled.translateX ? `${transform.translateX}px` : '0px';
    const y = enabled.translateY ? `${transform.translateY}px` : '0px';
    transformParts.push(`translate(${x}, ${y})`);
  }

  // Rotate —Ñ—É–Ω–∫—Ü–∏–∏
  if (enabled.rotateX) {
    transformParts.push(`rotateX(${transform.rotateX}deg)`);
  }
  if (enabled.rotateY) {
    transformParts.push(`rotateY(${transform.rotateY}deg)`);
  }

  // Scale —Ñ—É–Ω–∫—Ü–∏–∏
  if (enabled.scaleX && enabled.scaleY) {
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º scale() –µ—Å–ª–∏ –æ–±–∞ –≤–∫–ª—é—á–µ–Ω—ã
    transformParts.push(`scale(${transform.scaleX}, ${transform.scaleY})`);
  } else {
    if (enabled.scaleX) {
      transformParts.push(`scaleX(${transform.scaleX})`);
    }
    if (enabled.scaleY) {
      transformParts.push(`scaleY(${transform.scaleY})`);
    }
  }

  // Skew —Ñ—É–Ω–∫—Ü–∏–∏
  if (enabled.skewX) {
    transformParts.push(`skewX(${transform.skewX}deg)`);
  }
  if (enabled.skewY) {
    transformParts.push(`skewY(${transform.skewY}deg)`);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º none
  if (transformParts.length === 0) {
    return 'none';
  }

  return transformParts.join(' ');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSS keyframes –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å CSS keyframes –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateCSSKeyframes(data) {
  const spring = new Spring(data.damping, data.frequency);
  let time = 0;
  let frame = 0;
  let actualFrameCount = 0;
  
  // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
  const frames = [];
  
  while (time < data.maxTime) {
    const transform = calculateFrameTransform(time, spring, data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const currentAmplitudePercent = Math.abs(transform.baseAmplitude) * 100;
    if (currentAmplitudePercent <= data.amplitudeThresholdPercent) {
      console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –∞–º–ø–ª–∏—Ç—É–¥–∞ ${currentAmplitudePercent.toFixed(2)}% <= –ø–æ—Ä–æ–≥ ${data.amplitudeThresholdPercent}%`);
      break;
    }
    
    frames.push({
      time,
      transform,
      frame
    });
    
    actualFrameCount++;
    time += data.timeStep;
    frame++;
  }
  
  const lastValidTime = frames.length > 0 ? frames[frames.length - 1].time : 0;
  
  // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
  const keyframes = [`@keyframes spring-animation {`];
  
  frames.forEach((frameData, index) => {
    let percentage;
    if (index === 0) {
      percentage = 0;
    } else {
      // –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–æ 0.01%)
      percentage = roundByType(100 * (frameData.time / lastValidTime), 'opacity');
    }
    
    const transformString = createTransformString(frameData.transform, data);
    
    // –°–æ–∑–¥–∞–µ–º CSS –ø—Ä–∞–≤–∏–ª–æ —Å transform –∏ opacity (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    const cssRules = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º transform —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (transformString !== 'none') {
      cssRules.push(`transform: ${transformString}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º opacity –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (data.enabledProperties.opacity) {
      cssRules.push(`opacity: ${frameData.transform.opacity}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º keyframe —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å CSS –ø—Ä–∞–≤–∏–ª–∞
    if (cssRules.length > 0) {
      const cssRule = cssRules.join('; ') + ';';
      keyframes.push(`  ${percentage}% { ${cssRule} }`);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π keyframe –Ω–∞ 100%
  if (frames.length === 0) {
    const finalRules = [];
    const enabled = data.enabledProperties;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    if (enabled.translateX || enabled.translateY ||
        enabled.rotateX || enabled.rotateY ||
        enabled.scaleX || enabled.scaleY || enabled.skewX || enabled.skewY) {
      finalRules.push('transform: none');
    }
    
    if (enabled.opacity) {
      finalRules.push('opacity: 1');
    }
    
    if (finalRules.length > 0) {
      keyframes.push(`  100% { ${finalRules.join('; ')}; }`);
    }
  }
  
  keyframes.push(`}`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS —Å—Ç–∏–ª—å —Å transform-origin –∏ summary
  const enabledProps = [];
  if (data.enabledProperties.translateX || data.enabledProperties.translateY) {
    enabledProps.push('translate');
  }
  if (data.enabledProperties.rotateX || data.enabledProperties.rotateY) {
    enabledProps.push('rotate');
  }
  if (data.enabledProperties.scaleX || data.enabledProperties.scaleY) {
    enabledProps.push('scale');
  }
  if (data.enabledProperties.skewX || data.enabledProperties.skewY) {
    enabledProps.push('skew');
  }
  if (data.enabledProperties.opacity) {
    enabledProps.push('opacity');
  }

  const cssStyle = `/* Spring Animation Summary:
 * Frames: ${actualFrameCount}
 * Duration: ${Math.ceil(lastValidTime * 1000)}ms
 * Properties: ${enabledProps.join(', ')}
 * Transform Origin: ${data.transformOriginX}% ${data.transformOriginY}%
 */
.animating .body-square {
  animation: spring-animation ${Math.ceil(lastValidTime * 1000)}ms linear;
  transform-origin: ${data.transformOriginX}% ${data.transformOriginY}%;
}`;

  const fullCSS = keyframes.join("\n") + "\n\n" + cssStyle;

  return {
    css: fullCSS,
    actualFrameCount,
    actualDuration: Math.ceil(lastValidTime * 1000), // –†–µ–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ ms
    stoppedEarly: time < data.maxTime
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JavaScript keyframes –¥–ª—è Web Animations API
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å JS keyframes –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateJSKeyframes(data) {
  const spring = new Spring(data.damping, data.frequency);
  let time = 0;
  let frame = 0;
  let actualFrameCount = 0;
  
  // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
  const frames = [];
  
  while (time < data.maxTime) {
    const transform = calculateFrameTransform(time, spring, data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const currentAmplitudePercent = Math.abs(transform.baseAmplitude) * 100;
    if (currentAmplitudePercent <= data.amplitudeThresholdPercent) {
      console.log(`üõë JS: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –∞–º–ø–ª–∏—Ç—É–¥–∞ ${currentAmplitudePercent.toFixed(2)}% <= –ø–æ—Ä–æ–≥ ${data.amplitudeThresholdPercent}%`);
      break;
    }
    
    frames.push({
      time,
      transform,
      frame
    });
    
    actualFrameCount++;
    time += data.timeStep;
    frame++;
  }
  
  const lastValidTime = frames.length > 0 ? frames[frames.length - 1].time : 0;
  
  // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º JS keyframes —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ offset –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const keyframes = [];
  
  frames.forEach((frameData, index) => {
    let offset;
    if (index === 0) {
      offset = 0;
    } else {
      // Offset —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–¥–æ 0.0001)
      offset = Math.round(frameData.time / lastValidTime * 10000) / 10000;
    }
    
    const transformString = createTransformString(frameData.transform, data);
    
    // –°–æ–∑–¥–∞–µ–º JS keyframe –æ–±—ä–µ–∫—Ç —Å —É—Å–ª–æ–≤–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤
    const keyframeProps = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º transform —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (transformString !== 'none') {
      keyframeProps.push(`transform: '${transformString}'`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º opacity –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (data.enabledProperties.opacity) {
      keyframeProps.push(`opacity: ${frameData.transform.opacity}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º keyframe —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (keyframeProps.length > 0) {
      keyframes.push(`  { offset: ${offset}, ${keyframeProps.join(', ')} },`);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π keyframe —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä –Ω–µ –∏–º–µ–µ—Ç offset: 1
  const lastOffset = frames.length > 0 ? 
    Math.round(frames[frames.length - 1].time / lastValidTime * 10000) / 10000 : 0;
  
  if (frames.length === 0 || lastOffset < 1) {
    const finalProps = [];
    const enabled = data.enabledProperties;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (enabled.translateX || enabled.translateY ||
        enabled.rotateX || enabled.rotateY ||
        enabled.scaleX || enabled.scaleY || enabled.skewX || enabled.skewY) {
      finalProps.push(`transform: 'none'`);
    }
    
    if (enabled.opacity) {
      finalProps.push(`opacity: 1`);
    }
    
    if (finalProps.length > 0) {
      keyframes.push(`  { offset: 1, ${finalProps.join(', ')} },`);
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è summary
  const enabledProps = [];
  if (data.enabledProperties.translateX || data.enabledProperties.translateY) {
    enabledProps.push('translate');
  }
  if (data.enabledProperties.rotateX || data.enabledProperties.rotateY) {
    enabledProps.push('rotate');
  }
  if (data.enabledProperties.scaleX || data.enabledProperties.scaleY) {
    enabledProps.push('scale');
  }
  if (data.enabledProperties.skewX || data.enabledProperties.skewY) {
    enabledProps.push('skew');
  }
  if (data.enabledProperties.opacity) {
    enabledProps.push('opacity');
  }

  const jsCode = `/* Spring Animation Summary:
 * Frames: ${actualFrameCount}
 * Duration: ${Math.ceil(lastValidTime * 1000)}ms
 * Properties: ${enabledProps.join(', ')}
 * Transform Origin: ${data.transformOriginX}% ${data.transformOriginY}%
 */

const springKeyframes = [
${keyframes.join("\n")}
];

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// const element = document.querySelector('.body-square');
// element.style.transformOrigin = '${data.transformOriginX}% ${data.transformOriginY}%';
// element.animate(springKeyframes, {
//   duration: ${Math.ceil(lastValidTime * 1000)},
//   easing: 'linear',
//   fill: 'forwards'
// });`;

  return {
    js: jsCode,
    actualFrameCount,
    actualDuration: Math.ceil(lastValidTime * 1000),
    stoppedEarly: time < data.maxTime
  };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞—Å—á–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateSpringAnimation() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
    const parameters = getAnimationParameters();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const enabledProps = Object.keys(parameters.enabledProperties)
      .filter(prop => parameters.enabledProperties[prop]);
    console.log(`üéØ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: ${enabledProps.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æ
    if (enabledProps.length === 0) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –∞–Ω–∏–º–∞—Ü–∏–∏');
    }
    
    // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const animationData = calculateAnimationData(parameters);
    
    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º keyframes —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const cssResult = generateCSSKeyframes(animationData);
    const jsResult = generateJSKeyframes(animationData);
    
    // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º CSS duration –∏ keyframe duration
    return {
      success: true,
      cssKeyframes: cssResult.css,
      jsKeyframes: jsResult.js,
      cssAnimationDuration: animationData.cssAnimationDuration, // CSS –∞–Ω–∏–º–∞—Ü–∏—è duration –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞
      keyframesDuration: cssResult.actualDuration, // –†–µ–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å keyframes
      totalFrames: cssResult.actualFrameCount,
      amplitudeThresholdPercent: animationData.amplitudeThresholdPercent,
      stoppedEarly: cssResult.stoppedEarly,
      data: animationData
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏:", error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    getAnimationParameters,
    calculateAnimationData,
    calculateFrameTransform,
    createTransformString,
    generateCSSKeyframes,
    generateJSKeyframes,
    generateSpringAnimation
  };
}
